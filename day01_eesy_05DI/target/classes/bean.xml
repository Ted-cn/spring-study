<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!-- 把对象的创建交给spring来管理 -->
    <!-- spring中的依赖注入
        依赖注入：Dependency Injection
        IOC的作用：降低程序间的耦合（依赖关系），依赖关系的管理，以后都交给spring
            在当前类需要需要用到其他类的对象时，由spring为我们提供，我们中需要在配置文件中说明。
        依赖关系的维护：称为依赖注入
        能依赖注入的数据有三类：
            1. 基本类型和String
            2. 其他bean类型（在配置文件中或者注解配置过的bean）
            3. 复杂类型/集合类型
        注入的方式有三种：
            1. 使用构造函数提供
            2. 使用set方法提供
            3. 使用注解提供
    -->
    <!--  构造函数注入：
        使用的标签：constructor-arg
        标签出现的位置：bean标签的内部
        标签中的属性：
            type：用于指定要注入的数据的数据类型，该数据类型也是构造函数中某个或某些参数的类型
            index：用于指定要注入的数据给构造函数中指定索引位置的参数赋值。索引的位置从0开始
            name：用于指定给构造函数中指定名称的参数赋值 （常用）
            ======================以上三个用于指定给构造函数中哪个参数赋值=================
            value：用于提供基本类型和String类型的数据
            ref：用于指定其他bean类型数据。它指的是在spring的IOC核心容器中出现过的bean对象
        优势：在获取bean对象时，注入数据是必须的操作，否则对象无法创建成功。
        弊端：改变了bean对象的实例化方式，使我们在创建对象时，如果用不到这些数据，也必须提供。
    -->
    <bean id="accountService" class="com.cui.service.impl.AccountService" scope="singleton">
        <constructor-arg name="name" value="Tom"></constructor-arg>
        <constructor-arg name="age" value="18"></constructor-arg>
        <constructor-arg name="birthday" ref="now"></constructor-arg>
    </bean>

    <!-- 配置一个日期对象 -->
    <bean id="now" class="java.util.Date">
        <constructor-arg name="year" value="1994"></constructor-arg>
        <constructor-arg name="month" value="6"></constructor-arg>
        <constructor-arg name="date" value="8"></constructor-arg>
    </bean>

    <!-- set方法注入
        涉及的标签：property
        出现的位置：bean标签的内部
        标签的属性：
            name：用于指定注入时所调用的set方法名称
            value：用于提供基本类型和String类型的数据
            ref：用于指定其他的bean类型的数据。它指的是在spring的IOC核心容器中出现过的bean对象
        优势：创建对象时没有明确的限制，可以直接使用默认构造函数
        弊端：如果有某个成员变量必须有值，则获取对象时有可能set方法没有执行。
    -->
    <bean id="accountService2" class="com.cui.service.impl.AccountService2" scope="singleton">
        <property name="name" value="Tom"></property>
        <property name="age" value="18"></property>
        <property name="birthday" ref="now"></property>
    </bean>

    <!-- 复杂类型的注入/集合类型的注入
        用于给List结构集合注入的标签：list array set
        用于个Map结构集合注入的标签：map props
        结构相同，标签可以互换
    -->
    <bean id="accountService3" class="com.cui.service.impl.AccountService3" scope="singleton">
        <property name="array">
            <array>
                <value>1</value>
                <value>2</value>
                <value>3</value>
            </array>
        </property>
        <property name="list">
            <list>
                <value>1</value>
                <value>2</value>
                <value>3</value>
            </list>
        </property>
        <property name="set">
            <set>
                <value>1</value>
                <value>2</value>
                <value>3</value>
            </set>
        </property>
        <property name="map">
            <map>
                <entry key="1" value="2"></entry>
            </map>
        </property>
        <property name="properties">
            <props>
                <prop key="1">2</prop>
            </props>
        </property>
    </bean>
</beans>